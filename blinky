#include "board.h"
#include "FreeRTOS.h"
#include "task.h"
#include "semphr.h"
#define delay        vTaskDelay
#define time         configTICK_RATE_HZ      //time in ms i.e 1000ms

/* Sets up system hardware */
static void prvSetupHardware(void)
{
SystemCoreClockUpdate();
Board_Init();

* Initial LED0 state is off *
Board_LED_Set(0, 0);
Board_LED_Set(1, 0);
Board_LED_Set(2, 0);

}
xSemaphoreHandle_t xMutex= NULL;    // as declared in typedef xQueueHandle  xSemphoreHandle_t
/* LED1 toggle thread */
static void vLEDTask1(void *pvParameters)
{
while (1)
{
xSemaphoreTake(xMutex,portMAX_DELAY);
taskENTER_CRITICAL();
Board_LED_Set(0, 0);
delay(time);
Board_LED_Set(0, 1);

/* About a 3Hz on/off toggle rate */
taskEXIT_CRITICAL();
xSemaphoreGive(xMutex);
delay(3 * time + time /2);
}
}

/* LED2 toggle thread */
static void vLEDTask2(void *pvParameters)
{
delay(time + time / 2);

while (1)
{
xSemaphoreTake(xMutex,portMAX_DELAY);
Board_LED_Set(1, 0);
delay(time);
Board_LED_Set(1, 1);
xSemaphoreGive(xMutex);
/* About a 7Hz on/off toggle rate*/
delay(3 * time + time / 2);
}
}
static void vLEDTask3(void *pvParameters)
{
delay(3 * time);
while (1)
{
xSemaphoreTake(xMutex,portMAX_DELAY);
Board_LED_Set(2, 0);
delay(time);
Board_LED_Set(2, 1);
xSemaphoreGive(xMutex);
/* About a 7Hz on/off toggle rate*/
delay(3 * time + time / 2);
}
}


int main(void)
{
prvSetupHardware();
xMutex = xSemaphoreCreateMutex();
/* LED1 toggle thread */
xTaskCreate(vLEDTask1, (signed char* ) "vTaskLed1",
configMINIMAL_STACK_SIZE, NULL, (tskIDLE_PRIORITY + 3UL),
(xTaskHandle *) NULL);

/* LED2 toggle thread */
xTaskCreate(vLEDTask2, (signed char* ) "vTaskLed2",
configMINIMAL_STACK_SIZE, NULL, (tskIDLE_PRIORITY + 2UL),
(xTaskHandle *) NULL);

xTaskCreate(vLEDTask3, (signed char* ) "vTaskLed3",
configMINIMAL_STACK_SIZE, NULL, (tskIDLE_PRIORITY + 1UL),
(xTaskHandle *) NULL);

/* Start the scheduler */
vTaskStartScheduler();
/* Should never arrive here */
return 1;
}
